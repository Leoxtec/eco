varying vec4 frontColor;

attribute vec3 aVertexPosition;
attribute vec4 aVertexColor;

uniform mat4 ps_ModelViewMatrix;
uniform mat4 ps_ProjectionMatrix;
uniform float ps_PointSize;
uniform vec3 ps_Attenuation;

void main(void) {
	frontColor = aVertexColor;
	vec4 ecPos4 = ps_ModelViewMatrix * vec4(aVertexPosition, 1.0);
	float dist = length(ecPos4);
	float attn = ps_Attenuation[0] + (ps_Attenuation[1] * dist) + (ps_Attenuation[2] * dist * dist);
	gl_PointSize = (attn > 0.0 && attn < ps_PointSize) ? ps_PointSize * sqrt(1.0/attn) : ps_PointSize;
	gl_Position = ps_ProjectionMatrix * ecPos4;
}